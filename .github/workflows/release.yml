name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    steps:
      - name: Create release
        uses: actions/github-script@v6
        env:
          RELEASE_BRANCH: ${{ github.head_ref }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = `${process.env.RELEASE_BRANCH.split("/")[1]}`;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.payload.pull_request.merge_commit_sha,
            });
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              generate_release_notes: true,
              tag_name: tagName,
            });
  build_artifacts:
    needs: create_release
    name: Build executables
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set tag
        env:
          RELEASE_BRANCH: ${{ github.head_ref }}
        run: |
          TAG_NAME=$(echo $RELEASE_BRANCH | cut -d "/" -f2)
          echo "tag_name=$TAG_NAME" >> "$GITHUB_ENV"
        shell: bash
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ env.tag_name }}
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install requirements
        run: |
          python -m pip install .
          python -m pip install -r scripts/build_requirements.txt
      - name: Build and upload executables
        run: python scripts/build.py -f -u
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
