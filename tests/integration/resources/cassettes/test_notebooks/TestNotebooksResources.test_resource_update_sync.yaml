interactions:
- request:
    body: '{"data": {"type": "notebooks", "attributes": {"name": "Test NotebookUpdated",
      "cells": [{"attributes": {"definition": {"show_legend": true, "title": "Test
      Notebook", "type": "timeseries", "requests": [{"q": "avg:system.load.1{*}",
      "style": {"line_width": "normal", "palette": "dog_classic", "line_type": "solid"},
      "display_type": "line"}], "yaxis": {"scale": "linear"}}, "graph_size": "m",
      "split_by": {"keys": [], "tags": []}, "time": null}, "type": "notebook_cells",
      "id": "2fsbpu0n"}, {"attributes": {"definition": {"text": "Test message", "type":
      "markdown"}}, "type": "notebook_cells", "id": "dp2x1d2e"}, {"attributes": {"definition":
      {"requests": [{"formulas": [{"formula": "query1"}], "response_format": "scalar",
      "queries": [{"query": "avg:system.load.1{*}", "data_source": "metrics", "name":
      "query1", "aggregator": "avg"}]}], "type": "toplist"}, "graph_size": "m", "split_by":
      {"keys": [], "tags": []}, "time": null}, "type": "notebook_cells", "id": "qoavau2o"}],
      "time": {"live_span": "1h"}, "status": "published"}}}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1027'
      Content-Type:
      - application/json
      User-Agent:
      - datadog-sync-cli/0.0.1 (python 3.9.6; os darwin; arch x86_64)
    method: PUT
    uri: https://api.datadoghq.eu/api/v1/notebooks/15274
  response:
    body:
      string: '{"data": {"type": "notebooks", "id": 15274, "attributes": {"name":
        "Test NotebookUpdated", "cells": [{"attributes": {"definition": {"show_legend":
        true, "yaxis": {"scale": "linear"}, "type": "timeseries", "requests": [{"q":
        "avg:system.load.1{*}", "style": {"line_width": "normal", "palette": "dog_classic",
        "line_type": "solid"}, "display_type": "line"}], "title": "Test Notebook"},
        "graph_size": "m", "split_by": {"keys": [], "tags": []}, "time": null}, "type":
        "notebook_cells", "id": "2fsbpu0n"}, {"attributes": {"definition": {"text":
        "Test message", "type": "markdown"}}, "type": "notebook_cells", "id": "dp2x1d2e"},
        {"attributes": {"definition": {"requests": [{"formulas": [{"formula": "query1"}],
        "response_format": "scalar", "queries": [{"query": "avg:system.load.1{*}",
        "data_source": "metrics", "name": "query1", "aggregator": "avg"}]}], "type":
        "toplist"}, "graph_size": "m", "split_by": {"keys": [], "tags": []}, "time":
        null}, "type": "notebook_cells", "id": "qoavau2o"}], "time": {"live_span":
        "1h"}, "status": "published", "modified": "2021-09-03T15:07:51.430627+00:00",
        "created": "2021-09-03T15:07:49.834692+00:00", "author": {"name": "Frog",
        "handle": "frog@datadoghq.com", "email": "frog@datadoghq.com", "icon": "https://secure.gravatar.com/avatar/28a16dfe36e73b60c1d55872cb0f1172?s=48&d=retro",
        "title": null, "verified": true, "disabled": false, "status": "Active"}}}}'
    headers:
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      cache-control:
      - no-cache
      content-length:
      - '1278'
      content-security-policy:
      - frame-ancestors 'self'; report-uri https://api.datadoghq.eu/csp-report
      content-type:
      - application/json
      date:
      - Fri, 03 Sep 2021 15:07:51 GMT
      pragma:
      - no-cache
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-ratelimit-limit:
      - '30'
      x-ratelimit-period:
      - '60'
      x-ratelimit-remaining:
      - '29'
      x-ratelimit-reset:
      - '9'
    status:
      code: 200
      message: OK
- request:
    body: '{"data": {"type": "notebooks", "attributes": {"name": "RFC: [title] (from
      template)Updated", "cells": [{"attributes": {"definition": {"text": "Property                 |            Details                 |\n-----------------------------|------------------------------------------------------------------------------------------------------------------------\n**Author(s)**              |
      Name (Team name, Role), Name (Team name, Role)            \n**Status:**     |Draft
      / Review / Accepted / Closed        \n**Date Created:**              |HH:mm
      UTC MM/dd/yyyy                    \n\n_Use this template to outline your proposal,
      including graphs, code snippets, and images where necessary._ ", "type": "markdown"}},
      "type": "notebook_cells", "id": "l8rkjzhd"}, {"attributes": {"definition": {"text":
      "\n# Overview\n_Concisely describe the problem you need to solve and your recommended
      solution._\n\n\n# Problem\n_Describe the motivation for this proposal. Why is
      it important to solve?_\n\n# Constraints\n_Note any requirements that a solution
      must fulfill._\n\n1. \n2. \n\n\n\n", "type": "markdown"}}, "type": "notebook_cells",
      "id": "2te0gswu"}, {"attributes": {"definition": {"show_legend": true, "type":
      "timeseries", "requests": [{"q": "avg:system.load.1{*}", "style": {"line_width":
      "normal", "palette": "purple", "line_type": "solid"}, "display_type": "area"}],
      "yaxis": {"scale": "linear"}}, "graph_size": "xs", "split_by": {"keys": [],
      "tags": []}, "time": null}, "type": "notebook_cells", "id": "z8youq6a"}, {"attributes":
      {"definition": {"text": "# Proposed Solution\n_Describe your solution in detail.
      Explain why it''s better than the current state and other options considered.
      Address any critical operational issues like failure modes, failover, redundancy,
      performance, etc. Include graphs and code snippets of design details where necessary._\n\n-
      Strengths\n     - Example: takes up minimal disk space\n     -\n- Weaknesses\n     -
      Example: hash isn''t human-readable\n     -\n- Failure Modes\n   \n", "type":
      "markdown"}}, "type": "notebook_cells", "id": "7dacumjb"}, {"attributes": {"definition":
      {"text": "```json\n{ \n  \"data\": {\n    \"type\": \"notebooks\",\n    \"id\":
      0,\n    \"attributes\": {\n      \"cells\": [\n        {\n          \"type\":
      \"notebook_cells\",\n          \"id\": \"abcd1234\"\n        }\n      ],\n      \"status\":
      \"published\",\n      \"name\": \"Example Notebook\",\n      \"author\": {\n        \"name\":
      \"string\",\n        \"handle\": \"string\",\n        \"created_at\": \"2021-03-17T16:42:17.382Z\",  \n        \"email\":
      \"string\",\n        \"icon\": \"string\",\n        \"title\": \"string\",\n        \"verified\":
      true,\n        \"disabled\": true,\n        \"status\": \"string\"\n        }\n    }\n  }\n}\n```",
      "type": "markdown"}}, "type": "notebook_cells", "id": "34uin7xs"}, {"attributes":
      {"definition": {"text": "# Alternatives Considered\n_Describe other options
      considered and the tradeoffs relative to the recommended solution._\n## Solution
      1\n## Solution 2\n\n", "type": "markdown"}}, "type": "notebook_cells", "id":
      "0ryy65ac"}, {"attributes": {"definition": {"text": "# Open Questions\n_Note
      relevant questions and design topics._\n\n# Appendix\n_[Link](/) relevant documents
      or references._", "type": "markdown"}}, "type": "notebook_cells", "id": "5xnxosip"}],
      "time": {"live_span": "1h"}, "status": "published"}}}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3399'
      Content-Type:
      - application/json
      User-Agent:
      - datadog-sync-cli/0.0.1 (python 3.9.6; os darwin; arch x86_64)
    method: PUT
    uri: https://api.datadoghq.eu/api/v1/notebooks/15275
  response:
    body:
      string: '{"data": {"type": "notebooks", "id": 15275, "attributes": {"name":
        "RFC: [title] (from template)Updated", "cells": [{"attributes": {"definition":
        {"text": "Property                 |            Details                 |\n-----------------------------|------------------------------------------------------------------------------------------------------------------------\n**Author(s)**              |
        Name (Team name, Role), Name (Team name, Role)            \n**Status:**     |Draft
        / Review / Accepted / Closed        \n**Date Created:**              |HH:mm
        UTC MM/dd/yyyy                    \n\n_Use this template to outline your proposal,
        including graphs, code snippets, and images where necessary._ ", "type": "markdown"}},
        "type": "notebook_cells", "id": "l8rkjzhd"}, {"attributes": {"definition":
        {"text": "\n# Overview\n_Concisely describe the problem you need to solve
        and your recommended solution._\n\n\n# Problem\n_Describe the motivation for
        this proposal. Why is it important to solve?_\n\n# Constraints\n_Note any
        requirements that a solution must fulfill._\n\n1. \n2. \n\n\n\n", "type":
        "markdown"}}, "type": "notebook_cells", "id": "2te0gswu"}, {"attributes":
        {"definition": {"show_legend": true, "type": "timeseries", "requests": [{"q":
        "avg:system.load.1{*}", "style": {"line_width": "normal", "palette": "purple",
        "line_type": "solid"}, "display_type": "area"}], "yaxis": {"scale": "linear"}},
        "graph_size": "xs", "split_by": {"keys": [], "tags": []}, "time": null}, "type":
        "notebook_cells", "id": "z8youq6a"}, {"attributes": {"definition": {"text":
        "# Proposed Solution\n_Describe your solution in detail. Explain why it''s
        better than the current state and other options considered. Address any critical
        operational issues like failure modes, failover, redundancy, performance,
        etc. Include graphs and code snippets of design details where necessary._\n\n-
        Strengths\n     - Example: takes up minimal disk space\n     -\n- Weaknesses\n     -
        Example: hash isn''t human-readable\n     -\n- Failure Modes\n   \n", "type":
        "markdown"}}, "type": "notebook_cells", "id": "7dacumjb"}, {"attributes":
        {"definition": {"text": "```json\n{ \n  \"data\": {\n    \"type\": \"notebooks\",\n    \"id\":
        0,\n    \"attributes\": {\n      \"cells\": [\n        {\n          \"type\":
        \"notebook_cells\",\n          \"id\": \"abcd1234\"\n        }\n      ],\n      \"status\":
        \"published\",\n      \"name\": \"Example Notebook\",\n      \"author\": {\n        \"name\":
        \"string\",\n        \"handle\": \"string\",\n        \"created_at\": \"2021-03-17T16:42:17.382Z\",  \n        \"email\":
        \"string\",\n        \"icon\": \"string\",\n        \"title\": \"string\",\n        \"verified\":
        true,\n        \"disabled\": true,\n        \"status\": \"string\"\n        }\n    }\n  }\n}\n```",
        "type": "markdown"}}, "type": "notebook_cells", "id": "34uin7xs"}, {"attributes":
        {"definition": {"text": "# Alternatives Considered\n_Describe other options
        considered and the tradeoffs relative to the recommended solution._\n## Solution
        1\n## Solution 2\n\n", "type": "markdown"}}, "type": "notebook_cells", "id":
        "0ryy65ac"}, {"attributes": {"definition": {"text": "# Open Questions\n_Note
        relevant questions and design topics._\n\n# Appendix\n_[Link](/) relevant
        documents or references._", "type": "markdown"}}, "type": "notebook_cells",
        "id": "5xnxosip"}], "time": {"live_span": "1h"}, "status": "published", "modified":
        "2021-09-03T15:07:52.157748+00:00", "created": "2021-09-03T15:07:50.242301+00:00",
        "author": {"name": "Frog", "handle": "frog@datadoghq.com", "email": "frog@datadoghq.com",
        "icon": "https://secure.gravatar.com/avatar/28a16dfe36e73b60c1d55872cb0f1172?s=48&d=retro",
        "title": null, "verified": true, "disabled": false, "status": "Active"}}}}'
    headers:
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      cache-control:
      - no-cache
      content-length:
      - '3634'
      content-security-policy:
      - frame-ancestors 'self'; report-uri https://api.datadoghq.eu/csp-report
      content-type:
      - application/json
      date:
      - Fri, 03 Sep 2021 15:07:52 GMT
      pragma:
      - no-cache
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
      x-envoy-upstream-service-time:
      - '668'
      x-frame-options:
      - SAMEORIGIN
      x-ratelimit-limit:
      - '30'
      x-ratelimit-period:
      - '60'
      x-ratelimit-remaining:
      - '28'
      x-ratelimit-reset:
      - '8'
    status:
      code: 200
      message: OK
- request:
    body: '{"data": {"type": "notebooks", "attributes": {"name": "Gameday YYYY-MM-DD:
      [App Name] (from template)Updated", "cells": [{"attributes": {"definition":
      {"text": "Game days provide a framework to help us discover weaknesses, create
      more useful alerts, and deploy fixes that improve the way our services respond
      to failures.\n\n**Using this template:**\n- Record your test plan ahead of time\n-
      Set the time frame to match your planned failures\n- Use graphs to visualize
      signals you monitored and responded to\n- Collaborate on follow-up tasks\n\n---",
      "type": "markdown"}}, "type": "notebook_cells", "id": "vcwaa3le"}, {"attributes":
      {"definition": {"text": "# Participants:\n- Name (Team name, Role)\n- Name (Team
      name, Role)\n", "type": "markdown"}}, "type": "notebook_cells", "id": "w6f782jr"},
      {"attributes": {"definition": {"text": "# Goal\n_What is the purpose of this
      gameday?_\n\n# Dependencies\n_Which services does the app depend on to function
      properly? Include graphs where necessary._\n\n# Related services\n_Which related
      services does the app depend on? Include graphs where necessary._\n- [Related
      Dashboards](/dashboard/lists)\n\n# Related outages\n_Optional: what outages
      relate to this exercise?_\n\n", "type": "markdown"}}, "type": "notebook_cells",
      "id": "6iuzz8ye"}, {"attributes": {"definition": {"text": "### [replace this
      graph with relevant service ]", "type": "markdown"}}, "type": "notebook_cells",
      "id": "rpj42y2g"}, {"attributes": {"definition": {"show_legend": true, "type":
      "timeseries", "requests": [{"q": "avg:system.load.1{*} by {service}", "style":
      {"line_width": "normal", "palette": "dog_classic", "line_type": "solid"}, "display_type":
      "area"}], "yaxis": {"scale": "linear"}}, "graph_size": "xs", "split_by": {"keys":
      [], "tags": []}, "time": null}, "type": "notebook_cells", "id": "rw9np336"},
      {"attributes": {"definition": {"text": "# Test 1: [name]\n_Clone this cell to
      create more tests_\n## Prerequisites\n_Optional tasks to complete before the
      test_\n- [X] ~~Prereq 1~~\n- [ ] Prereq 2\n\n## Action\n_Actions to take during
      the test (script to run, instance to shutdown, etc.)_\n- [ ] Action 1\n- [ ]
      Action 2\n\n## Observability\n_Dashboards, graphs, log files, and other resources
      to monitor during the test. Include relevant graphs._\n- [Related Dashboards](/dashboard/lists)\n\n\n##
      Cleanup\n_Optional tasks to go back to a clean state_\n- [ ] Task 1\n- [ ] Task
      2\n\nExpected Results | Actual Results|  Comments | \n------------------------|--------------------
      | ---------------- |\nExample: Monitor ID 1234567890 should trigger  |PASS /
      FAIL / UNKNOWN |  This went wrong, we believe this is the issue     |\n_  |
      PASS / FAIL / UNKNOWN   | _ |\n_  | PASS / FAIL / UNKNOWN   | _ |\n\n\n### Notes\n-
      Optional\n- Interesting graphs, loglines, general comments on the test, etc.",
      "type": "markdown"}}, "type": "notebook_cells", "id": "08zotnlb"}, {"attributes":
      {"definition": {"show_legend": true, "type": "timeseries", "requests": [{"q":
      "avg:system.load.1{*} by {service}", "style": {"line_width": "normal", "palette":
      "dog_classic", "line_type": "solid"}, "display_type": "area"}], "yaxis": {"scale":
      "linear"}}, "graph_size": "xs", "split_by": {"keys": [], "tags": []}, "time":
      null}, "type": "notebook_cells", "id": "8uzbdxoc"}, {"attributes": {"definition":
      {"text": "## Follow-up work\nFor each issue/improvement identified, create a
      follow-up action with an owner, priority, and due date. \n**This is the most
      important part of the gameday!**\n\n- Issue 1: [Link to follow-up item](/)\n-
      Issue 2: [Link to follow-up item](/)\n", "type": "markdown"}}, "type": "notebook_cells",
      "id": "wwhju4ds"}], "time": {"live_span": "1h"}, "status": "published"}}}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3706'
      Content-Type:
      - application/json
      User-Agent:
      - datadog-sync-cli/0.0.1 (python 3.9.6; os darwin; arch x86_64)
    method: PUT
    uri: https://api.datadoghq.eu/api/v1/notebooks/15276
  response:
    body:
      string: '{"data": {"type": "notebooks", "id": 15276, "attributes": {"name":
        "Gameday YYYY-MM-DD: [App Name] (from template)Updated", "cells": [{"attributes":
        {"definition": {"text": "Game days provide a framework to help us discover
        weaknesses, create more useful alerts, and deploy fixes that improve the way
        our services respond to failures.\n\n**Using this template:**\n- Record your
        test plan ahead of time\n- Set the time frame to match your planned failures\n-
        Use graphs to visualize signals you monitored and responded to\n- Collaborate
        on follow-up tasks\n\n---", "type": "markdown"}}, "type": "notebook_cells",
        "id": "vcwaa3le"}, {"attributes": {"definition": {"text": "# Participants:\n-
        Name (Team name, Role)\n- Name (Team name, Role)\n", "type": "markdown"}},
        "type": "notebook_cells", "id": "w6f782jr"}, {"attributes": {"definition":
        {"text": "# Goal\n_What is the purpose of this gameday?_\n\n# Dependencies\n_Which
        services does the app depend on to function properly? Include graphs where
        necessary._\n\n# Related services\n_Which related services does the app depend
        on? Include graphs where necessary._\n- [Related Dashboards](/dashboard/lists)\n\n#
        Related outages\n_Optional: what outages relate to this exercise?_\n\n", "type":
        "markdown"}}, "type": "notebook_cells", "id": "6iuzz8ye"}, {"attributes":
        {"definition": {"text": "### [replace this graph with relevant service ]",
        "type": "markdown"}}, "type": "notebook_cells", "id": "rpj42y2g"}, {"attributes":
        {"definition": {"show_legend": true, "type": "timeseries", "requests": [{"q":
        "avg:system.load.1{*} by {service}", "style": {"line_width": "normal", "palette":
        "dog_classic", "line_type": "solid"}, "display_type": "area"}], "yaxis": {"scale":
        "linear"}}, "graph_size": "xs", "split_by": {"keys": [], "tags": []}, "time":
        null}, "type": "notebook_cells", "id": "rw9np336"}, {"attributes": {"definition":
        {"text": "# Test 1: [name]\n_Clone this cell to create more tests_\n## Prerequisites\n_Optional
        tasks to complete before the test_\n- [X] ~~Prereq 1~~\n- [ ] Prereq 2\n\n##
        Action\n_Actions to take during the test (script to run, instance to shutdown,
        etc.)_\n- [ ] Action 1\n- [ ] Action 2\n\n## Observability\n_Dashboards, graphs,
        log files, and other resources to monitor during the test. Include relevant
        graphs._\n- [Related Dashboards](/dashboard/lists)\n\n\n## Cleanup\n_Optional
        tasks to go back to a clean state_\n- [ ] Task 1\n- [ ] Task 2\n\nExpected
        Results | Actual Results|  Comments | \n------------------------|--------------------
        | ---------------- |\nExample: Monitor ID 1234567890 should trigger  |PASS
        / FAIL / UNKNOWN |  This went wrong, we believe this is the issue     |\n_  |
        PASS / FAIL / UNKNOWN   | _ |\n_  | PASS / FAIL / UNKNOWN   | _ |\n\n\n###
        Notes\n- Optional\n- Interesting graphs, loglines, general comments on the
        test, etc.", "type": "markdown"}}, "type": "notebook_cells", "id": "08zotnlb"},
        {"attributes": {"definition": {"show_legend": true, "type": "timeseries",
        "requests": [{"q": "avg:system.load.1{*} by {service}", "style": {"line_width":
        "normal", "palette": "dog_classic", "line_type": "solid"}, "display_type":
        "area"}], "yaxis": {"scale": "linear"}}, "graph_size": "xs", "split_by": {"keys":
        [], "tags": []}, "time": null}, "type": "notebook_cells", "id": "8uzbdxoc"},
        {"attributes": {"definition": {"text": "## Follow-up work\nFor each issue/improvement
        identified, create a follow-up action with an owner, priority, and due date.
        \n**This is the most important part of the gameday!**\n\n- Issue 1: [Link
        to follow-up item](/)\n- Issue 2: [Link to follow-up item](/)\n", "type":
        "markdown"}}, "type": "notebook_cells", "id": "wwhju4ds"}], "time": {"live_span":
        "1h"}, "status": "published", "modified": "2021-09-03T15:07:53.034169+00:00",
        "created": "2021-09-03T15:07:50.594490+00:00", "author": {"name": "Frog",
        "handle": "frog@datadoghq.com", "email": "frog@datadoghq.com", "icon": "https://secure.gravatar.com/avatar/28a16dfe36e73b60c1d55872cb0f1172?s=48&d=retro",
        "title": null, "verified": true, "disabled": false, "status": "Active"}}}}'
    headers:
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      cache-control:
      - no-cache
      content-length:
      - '3907'
      content-security-policy:
      - frame-ancestors 'self'; report-uri https://api.datadoghq.eu/csp-report
      content-type:
      - application/json
      date:
      - Fri, 03 Sep 2021 15:07:53 GMT
      pragma:
      - no-cache
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
      x-envoy-upstream-service-time:
      - '694'
      x-frame-options:
      - SAMEORIGIN
      x-ratelimit-limit:
      - '30'
      x-ratelimit-period:
      - '60'
      x-ratelimit-remaining:
      - '27'
      x-ratelimit-reset:
      - '8'
    status:
      code: 200
      message: OK
- request:
    body: '{"data": {"type": "notebooks", "attributes": {"name": "Postmortem IR-xxxx:
      [outage name] (from template)Updated", "cells": [{"attributes": {"definition":
      {"text": "Incident Property                  |            Details                 |\n-----------------------------|------------------------------------------------------------------------------------------------------------------------\n**Status:**                |Active/Stable/Resolved                  \n**Severity:**     |SEV-X                      \n**Started:**              |HH:mm
      UTC MM/dd/yyyy                  \n**Commander:**     |[name]                 \n**Incident
      Overview:** | [IR-xxxx] (/incidents)                 \n**Slack Channel:**        |[#IR-xxxx]
      (/link)                 \n\n_You can generate a postmortem [from any resolved
      incident](/incidents?query=state%3Aresolved) with these fields pre-fillled,
      along with incident metadata and timeline._ ", "type": "markdown"}}, "type":
      "notebook_cells", "id": "pp1vm0s8"}, {"attributes": {"definition": {"text":
      "# What happened?\n### Impact on customers\n_How did this incident impact external
      users?_", "type": "markdown"}}, "type": "notebook_cells", "id": "dci6b8sg"},
      {"attributes": {"definition": {"text": "# Why did it happen?\n### Root cause\n_A
      deep dive into the causes and what went particularly wrong._", "type": "markdown"}},
      "type": "notebook_cells", "id": "zcm3akyt"}, {"attributes": {"definition": {"text":
      "# Timeline\n\n_A detailed sequence of the events that led to the incident,
      including contributing factors, notification, and remediation actions._\n\n_You
      can add graphs that show what happened and scope them to the exact time range
      of the incident._\n\n", "type": "markdown"}}, "type": "notebook_cells", "id":
      "xwhr4e9q"}, {"attributes": {"definition": {"text": "- [timestamp] event\n-
      [timestamp] event", "type": "markdown"}}, "type": "notebook_cells", "id": "hy9zij5i"},
      {"attributes": {"definition": {"show_legend": true, "type": "timeseries", "requests":
      [{"q": "avg:system.load.1{*}", "style": {"line_width": "normal", "palette":
      "dog_classic", "line_type": "solid"}, "display_type": "area"}], "yaxis": {"scale":
      "linear"}}, "graph_size": "m", "split_by": {"keys": [], "tags": []}, "time":
      null}, "type": "notebook_cells", "id": "kmp003ky"}, {"attributes": {"definition":
      {"text": "# How do we prevent it in the future?\n### Action Items\n_Include
      both short-term and long-term steps to prevent this in the future. Link to any
      relevant action items, and include when the action items are planned._\n\n\n###
      Short-term\n- [X] ~~Action 1~~\n- [ ] Action 2\n\n### Long-term\n- [ ] Action
      1\n- [ ] Action 2", "type": "markdown"}}, "type": "notebook_cells", "id": "gajt34ww"}],
      "time": {"live_span": "1h"}, "status": "published"}}}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2775'
      Content-Type:
      - application/json
      User-Agent:
      - datadog-sync-cli/0.0.1 (python 3.9.6; os darwin; arch x86_64)
    method: PUT
    uri: https://api.datadoghq.eu/api/v1/notebooks/15277
  response:
    body:
      string: '{"data": {"type": "notebooks", "id": 15277, "attributes": {"name":
        "Postmortem IR-xxxx: [outage name] (from template)Updated", "cells": [{"attributes":
        {"definition": {"text": "Incident Property                  |            Details                 |\n-----------------------------|------------------------------------------------------------------------------------------------------------------------\n**Status:**                |Active/Stable/Resolved                  \n**Severity:**     |SEV-X                      \n**Started:**              |HH:mm
        UTC MM/dd/yyyy                  \n**Commander:**     |[name]                 \n**Incident
        Overview:** | [IR-xxxx] (/incidents)                 \n**Slack Channel:**        |[#IR-xxxx]
        (/link)                 \n\n_You can generate a postmortem [from any resolved
        incident](/incidents?query=state%3Aresolved) with these fields pre-fillled,
        along with incident metadata and timeline._ ", "type": "markdown"}}, "type":
        "notebook_cells", "id": "pp1vm0s8"}, {"attributes": {"definition": {"text":
        "# What happened?\n### Impact on customers\n_How did this incident impact
        external users?_", "type": "markdown"}}, "type": "notebook_cells", "id": "dci6b8sg"},
        {"attributes": {"definition": {"text": "# Why did it happen?\n### Root cause\n_A
        deep dive into the causes and what went particularly wrong._", "type": "markdown"}},
        "type": "notebook_cells", "id": "zcm3akyt"}, {"attributes": {"definition":
        {"text": "# Timeline\n\n_A detailed sequence of the events that led to the
        incident, including contributing factors, notification, and remediation actions._\n\n_You
        can add graphs that show what happened and scope them to the exact time range
        of the incident._\n\n", "type": "markdown"}}, "type": "notebook_cells", "id":
        "xwhr4e9q"}, {"attributes": {"definition": {"text": "- [timestamp] event\n-
        [timestamp] event", "type": "markdown"}}, "type": "notebook_cells", "id":
        "hy9zij5i"}, {"attributes": {"definition": {"show_legend": true, "type": "timeseries",
        "requests": [{"q": "avg:system.load.1{*}", "style": {"line_width": "normal",
        "palette": "dog_classic", "line_type": "solid"}, "display_type": "area"}],
        "yaxis": {"scale": "linear"}}, "graph_size": "m", "split_by": {"keys": [],
        "tags": []}, "time": null}, "type": "notebook_cells", "id": "kmp003ky"}, {"attributes":
        {"definition": {"text": "# How do we prevent it in the future?\n### Action
        Items\n_Include both short-term and long-term steps to prevent this in the
        future. Link to any relevant action items, and include when the action items
        are planned._\n\n\n### Short-term\n- [X] ~~Action 1~~\n- [ ] Action 2\n\n###
        Long-term\n- [ ] Action 1\n- [ ] Action 2", "type": "markdown"}}, "type":
        "notebook_cells", "id": "gajt34ww"}], "time": {"live_span": "1h"}, "status":
        "published", "modified": "2021-09-03T15:07:53.780120+00:00", "created": "2021-09-03T15:07:50.953603+00:00",
        "author": {"name": "Frog", "handle": "frog@datadoghq.com", "email": "frog@datadoghq.com",
        "icon": "https://secure.gravatar.com/avatar/28a16dfe36e73b60c1d55872cb0f1172?s=48&d=retro",
        "title": null, "verified": true, "disabled": false, "status": "Active"}}}}'
    headers:
      Alt-Svc:
      - clear
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 google
      cache-control:
      - no-cache
      content-length:
      - '3010'
      content-security-policy:
      - frame-ancestors 'self'; report-uri https://api.datadoghq.eu/csp-report
      content-type:
      - application/json
      date:
      - Fri, 03 Sep 2021 15:07:54 GMT
      pragma:
      - no-cache
      vary:
      - Accept-Encoding
      x-content-type-options:
      - nosniff
      x-envoy-upstream-service-time:
      - '626'
      x-frame-options:
      - SAMEORIGIN
      x-ratelimit-limit:
      - '30'
      x-ratelimit-period:
      - '60'
      x-ratelimit-remaining:
      - '26'
      x-ratelimit-reset:
      - '7'
    status:
      code: 200
      message: OK
version: 1
